//import org.jetbrains.changelog.ExtensionsKt
plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.1.2'
    id 'org.jetbrains.changelog' version "1.2.0"
    id "io.freefair.lombok" version "5.3.3.3"
    id 'idea'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}
def jenkinsPluginName = 'jenkins-control-plugin'
def jenkinsPluginVersion = '0.13.12'
def javaVersion = 11

group 'org.codinjutsu'
version "${jenkinsPluginVersion}-2021.2-eap4"
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.changelog'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "io.freefair.lombok"

intellij {
    pluginName.set(jenkinsPluginName)
    version.set('LATEST-EAP-SNAPSHOT')
    updateSinceUntilBuild.set(false)
    downloadSources.set(true)
    type.set('IC')
    //type.set('RD') //Rider
    plugins.set(['com.intellij.java'])

    patchPluginXml {
        version.set("${project.version}")
        pluginDescription.set(file('includes/pluginDescription.html').text)
        //changeNotes.set(provider { changelog.getLatest().toHTML() })
        def allChanges = { changelog.getAll().values().collect { it.withHeader(true) }.collect {it.toHTML()}.join('\n<br>\n') }
        changeNotes.set(provider { allChanges() } )
    }
}

changelog {
    version = jenkinsPluginVersion
    path = "${project.projectDir}/CHANGELOG.md"
    header = provider { "[${version.get()}]" }
    //headerParserRegex = ~/\d+\.\d+/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    //groups = ["Added", "Changed", "Deprecated", "Removed"]
    groups = []
}

lombok {
    version = "1.18.20"
    generateLombokConfig.enabled = false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release.set(javaVersion)
}

configurations {
    provided
}

sourceSets {
    main {
        java {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
        resources {
        }
    }
    test {
        java {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
        resources {
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
}

dependencies {
    implementation ('com.github.cliftonlabs:json-simple:4.0.0') {
        exclude group: 'junit'
    }
    implementation('com.offbytwo.jenkins:jenkins-client:0.3.8') {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
        // provided by Idea Platform
        //exclude group: 'commons-io' // not exists in all products (missing in PyCharm e.g)
        exclude group: 'commons-lang'
        exclude group: 'commons-collections'
        exclude group: 'commons-logging'
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'jaxen'
    }

    testImplementation(
            'junit:junit:4.13.2',
            'org.mockito:mockito-core:3.11.2',
            'org.powermock:powermock-api-mockito2:2.0.9',
            'org.powermock:powermock-core:2.0.9',
            'org.assertj:assertj-core:3.20.2',
            'org.assertj:assertj-swing-junit:3.17.1'
    )
}

test {
    jvmArgs '-enableassertions', '-Djava.awt.headless=true'
    doFirst {
        systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

runIde {
    //jvmArgs '-Djava.awt.headless=true'
    jvmArgs = ['-XX:+UnlockDiagnosticVMOptions']
    systemProperty('ide.plugins.snapshot.on.unload.fail', 'true')
    systemProperty('ide.plugins.analyze.snapshot', 'true')
    systemProperty('ide.plugins.allow.unload.from.sources', 'true')
}

buildPlugin {
    doLast {
        copy {
            from 'build/distributions'
            include "${jenkinsPluginName}-${project.version}.zip"
            into "snapshot"
        }
    }
}

prepareSandbox {
    from (['README.md', 'CHANGELOG.md', 'LICENSE.txt']) {
        into "${jenkinsPluginName}/"
    }
}

sonarqube {
    properties {
        //property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "MCMicS_jenkins-control-plugin"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

import org.jetbrains.intellij.tasks.RunPluginVerifierTask
def ideaVersionToVerify = "212.4037.9"
def verifyFailureLevel = EnumSet.copyOf(RunPluginVerifierTask.FailureLevel.ALL)
verifyFailureLevel.remove(RunPluginVerifierTask.FailureLevel.NOT_DYNAMIC)
runPluginVerifier {
    //distributionFile = "${jenkinsPluginName}-${project.version}"
    ideVersions = ["IU-${ideaVersionToVerify}"]
//    ideVersions = ["IC-2020.3", "PS-2020.3", "IU-2020.3"]
    failureLevel = verifyFailureLevel
    verifierVersion = "latest"
}
signPlugin {
    def _privateKey = file('private/signing.pem')
    def _certificateChain = file('private/signing.key')
    certificateChain.set(_certificateChain.exists() ?  _certificateChain.text : null)
    privateKey.set(_privateKey.exists() ?  _privateKey.text : null)
    doLast {
        copy {
            from 'build/distributions'
            include "${jenkinsPluginName}-signed.zip"
            into "snapshot"
            rename "${jenkinsPluginName}-signed.zip", "${jenkinsPluginName}-${project.version}-signed.zip"
        }
    }
}
