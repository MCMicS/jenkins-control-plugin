//import org.jetbrains.changelog.ExtensionsKt
plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.5.3'
    id 'org.jetbrains.changelog' version "1.3.1"
    id "io.freefair.lombok" version "6.4.3.1"
    id 'idea'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
}
def readPropertyString = (key) -> property(key).toString()

group readPropertyString('pluginGroup')
version "${readPropertyString('pluginVersion')}-${readPropertyString('pluginSincePlatformVersion')}"
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.changelog'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "io.freefair.lombok"

intellij {
    pluginName.set(readPropertyString('pluginName'))
    version.set(readPropertyString('platformVersion'))
    type.set(readPropertyString('platformType'))
    downloadSources.set(true)
    plugins.set(Arrays.asList(readPropertyString("platformPlugins").split(',')))

    patchPluginXml {
        version.set(project.version)
        sinceBuild.set(readPropertyString("pluginSinceBuild"))
        untilBuild.set(readPropertyString("pluginUntilBuild"))
        pluginDescription.set(file('includes/pluginDescription.html').text)
        //changeNotes.set(provider { changelog.getLatest().toHTML() })
        def allChanges = { changelog.getAll().values().collect { it.withHeader(true) }.collect {it.toHTML()}.join('\n<br>\n') }
        changeNotes.set(provider { allChanges() } )
    }
}

changelog {
    version = readPropertyString('pluginVersion')
    path = "${project.projectDir}/CHANGELOG.md"
    header = provider { "[${version.get()}]" }
    //headerParserRegex = ~/\d+\.\d+/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    //groups = ["Added", "Changed", "Deprecated", "Removed"]
    groups = []
}

lombok {
    version = "1.18.22"
    disableConfig = false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(readPropertyString("javaVersion"))
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release.set(Integer.parseInt(readPropertyString("javaVersion")))
}
tasks.wrapper {
    gradleVersion = readPropertyString("gradleVersion")
}

configurations {
    provided
}

sourceSets {
    main {
        java {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
        resources {
        }
    }
    test {
        java {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
        resources {
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
}

dependencies {
    implementation ('com.github.cliftonlabs:json-simple:4.0.1') {
        exclude group: 'junit'
    }
    implementation('com.offbytwo.jenkins:jenkins-client:0.3.8') {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
        // provided by Idea Platform
        //exclude group: 'commons-io' // not exists in all products (missing in PyCharm e.g)
        exclude group: 'commons-lang'
        exclude group: 'commons-collections'
        exclude group: 'commons-logging'
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'jaxen'
    }

    testImplementation(
            'junit:junit:4.13.2',
            'org.mockito:mockito-core:4.6.1',
            'org.powermock:powermock-api-mockito2:2.0.9',
            'org.powermock:powermock-core:2.0.9',
            'org.assertj:assertj-core:3.23.1',
            'org.assertj:assertj-swing-junit:3.17.1'
    )
}

test {
    jvmArgs '-enableassertions', '-Djava.awt.headless=true'
    doFirst {
        systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

runIde {
    jvmArgs = ['-XX:+UnlockDiagnosticVMOptions']
    systemProperty('ide.plugins.snapshot.on.unload.fail', 'true')
    systemProperty('ide.plugins.analyze.snapshot', 'true')
    systemProperty('ide.plugins.allow.unload.from.sources', 'true')
}

buildPlugin {
    doLast {
        copy {
            from 'build/distributions'
            include "${readPropertyString('pluginName')}-${project.version}.zip"
            into "snapshot"
        }
    }
}

prepareSandbox {
    from (['README.md', 'CHANGELOG.md', 'LICENSE.txt']) {
        into "${readPropertyString('pluginName')}/"
    }
}

sonarqube {
    properties {
        property "sonar.organization", "mcmics-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "MCMicS_jenkins-control-plugin"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

import org.jetbrains.intellij.tasks.RunPluginVerifierTask
def ideaVersionToVerify = readPropertyString('platformVersionToVerify')
def verifyFailureLevel = EnumSet.copyOf(RunPluginVerifierTask.FailureLevel.ALL)
verifyFailureLevel.remove(RunPluginVerifierTask.FailureLevel.NOT_DYNAMIC)
runPluginVerifier {
    // filled by task listProductsReleases
    //ideVersions = ["IU-${ideaVersionToVerify}"]
//    ideVersions = ["IC-2020.3", "PS-2020.3", "IU-2020.3"]
    failureLevel = verifyFailureLevel
    verifierVersion = "latest"
}
signPlugin {
    def _privateKey = file('private/mcmics.pem')
    def _certificateChain = file('private/mcmics-sign.crt')
    privateKey.set(_privateKey.exists() ?  _privateKey.text : System.getenv("PRIVATE_KEY"))
    certificateChain.set(_certificateChain.exists() ?  _certificateChain.text : System.getenv("CERTIFICATE_CHAIN"))
    password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    doLast {
        copy {
            from 'build/distributions'
            include "${readPropertyString('pluginName')}-${project.version}-signed.zip"
            into "snapshot"
        }
    }
}
def getChannel(String version) {
    def semVerPreReleaseIndex = version.indexOf('-')
    final preReleaseVersion = semVerPreReleaseIndex != -1 ? version.substring(semVerPreReleaseIndex + 1) : 'default';
    final firstDotInPreRelease = preReleaseVersion.indexOf('.');
    return firstDotInPreRelease == -1 ? preReleaseVersion : preReleaseVersion.substring(0, firstDotInPreRelease);
}
publishPlugin {
    def channel = getChannel(readPropertyString('pluginVersion'))
    def isRelease = channel == 'default';
    if (isRelease) {
        dependsOn patchChangelog
    }
    token.set(System.getenv("PUBLISH_TOKEN"))
    // pluginVersion is based on the SemVer (https://semver.org) and supports pre-release labels, like 2.1.7-alpha.3
    // Specify pre-release label to publish the plugin in a custom Release Channel automatically. Read more:
    // https://plugins.jetbrains.com/docs/intellij/deployment.html#specifying-a-release-channel
    channels.set([channel])
}
